#include "defs.h"

#ifndef EVAL_H
#define EVAL_H
#define SQOFFBOARD(sq) (FilesBrd[(sq)]==OFFBOARD)
#define SAME_FILE(sq,sq2) ( ( FileBBMask[FilesBrd[(sq)]] == FileBBMask[FilesBrd[(sq2)]] ) ? (1) : (0) )
#define SAME_RANK(sq,sq2) ( ( RankBBMask[RanksBrd[(sq)]] == RankBBMask[RanksBrd[(sq2)]] ) ? (1) : (0) )
#define R_BIGER_R2(sq,sq2) ( ( RankBBMask[RanksBrd[(sq)]] > RankBBMask[RanksBrd[(sq2)]] ) ? (1) : (0) )
#define R_SMALLER_R2(sq,sq2) ( ( RankBBMask[RanksBrd[(sq)]] < RankBBMask[RanksBrd[(sq2)]] ) ? (1) : (0) )
//#define REL_SQ64(sq64,side) ( side == WHITE ? (sq64) : Mirror64[(sq64)] )
//#define REL_SQ(sq120,side) ( side == WHITE ? (sq120) : Mirror120[SQ64(sq120)] )

#define IsPawnB(p) (PiecePawnB[(p)])
#define IsPawnW(p) (PiecePawnW[(p)])
#define IsBishop(p) (PieceBishop[(p)])
#define IsRook(p) (PieceRook[(p)])
#define IsKnight(p) (PieceKnight[(p)])
#define IsKing(p) (PieceKing[(p)])

enum {
    SCALE_OCB_BISHOPS_ONLY =  64,
    SCALE_OCB_ONE_KNIGHT   = 106,
    SCALE_OCB_ONE_ROOK     =  96,
    SCALE_NORMAL           = 128,
};

const int PceDir[13][8] = {
	{ 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0 },
	{ -8, -19,	-21, -12, 8, 19, 21, 12 },
	{ -9, -11, 11, 9, 0, 0, 0, 0 },
	{ -1, -10,	1, 10, 0, 0, 0, 0 },
	{ -1, -10,	1, 10, -9, -11, 11, 9 },
	{ -1, -10,	1, 10, -9, -11, 11, 9 },
	{ 0, 0, 0, 0, 0, 0, 0, 0 },
	{ -8, -19,	-21, -12, 8, 19, 21, 12 },
	{ -9, -11, 11, 9, 0, 0, 0, 0 },
	{ -1, -10,	1, 10, 0, 0, 0, 0 },
	{ -1, -10,	1, 10, -9, -11, 11, 9 },
	{ -1, -10,	1, 10, -9, -11, 11, 9 }
};

const int NumDir[13] = {
 0, 0, 8, 4, 4, 8, 8, 0, 8, 4, 4, 8, 8
};

const int BrotherPassedBonus[8] = { 0, 0, 1, 4, 7, 12, 24, 0};
const int RookSupport = 12;
const int QueenSupport = 6;
const int PawnPassedNoProtected[8] = { 0, 0, 0, 0, 10, 50, 100, 0};
const int RookOpenFile = 10;
const int RookSemiOpenFile = 5;
const int RookOnPawn = 10;
const int QueenOpenFile = 5;
const int QueenSemiOpenFile = 3;
const int QueenNonOpenFile = 5;
const int KingOpenFile = 20;
const int KingAlmostOpenFile = 15;
const int KingThirdOpenFile = 13;
const int KingSemiOpenFile = 10;
const int KingAlmostSemiOpenFile = 8;
const int KingThirdSemiOpenFile = 6;
const int KingSemiOpenFile2 = 4;
const int KingAlmostSemiOpenFile2 = 2;
const int KingThirdSemiOpenFile2 = 1;
const int SHIELD_2 = 10;
const int SHIELD_3 = 5;
const int P_NO_SHIELD = 10;
const int BishopPair = 42;
const int KnightPair = 11;
const int Mobility[16] = { -30, -20, -10, -4, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24};
const int QueenCheck = 3;
const int RookCheck = 5;
const int BishopCheck = 6;  //  Q     R     B   KN|     5     4    4    3
const int KnightCheck = 7;  // 780  1080  635 790 rook 10, kn 7, q 7, b 6

const int PawnIsolated = -5;
const int PawnIsolatedEG = -15;
const int Doubled = 11;
const int DoubledEG = 56;
/*const int PawnIsolated = 2;
const int PawnIsolatedEG = 7;
const int Doubled = 5;
const int DoubledEG = 26;*/
const int PawnPassed[8] = { 0, 10, 17, 15, 62, 168, 276, 0};
const int PawnPassedEG[8] = { 0, 28, 33, 41, 72, 177, 290, 0};
const int Connected[8] = { 0, 7, 8, 12, 29, 48, 86, 0};
const int WeakLever = 56;
const int WeakUnopposed = 13;
const int WeakUnopposedEG = 27;
//const int WeakUnopposed = 6;
//const int WeakUnopposedEG = 12;
const int BlockedStorm = 38;

const int P_KING_BLOCKS_ROOK   = 24;
const int P_BLOCK_CENTRAL_PAWN = 14;
const int P_BISHOP_TRAPPED_A7  = 150;
const int P_BISHOP_TRAPPED_A6  = 50;
const int P_KNIGHT_TRAPPED_A8  = 150;
const int P_KNIGHT_TRAPPED_A7  = 100;
const int P_C3_KNIGHT = 30;
const int P_NO_FIANCHETTO = 4;
const int RETURNING_BISHOP = 20;
const int FIANCHETTO = 4;
const int TEMPO = 10;

const int ENDGAME_MAT = 1300;

// NEW ONE N3
const int PawnTable[64] = {
0	,	0	,	0	,	0	,	0	,	0	,	0	,	0	,
10	,	10	,   0	,	-12	,   -12	,   0	,	10	,	10	,
0	,	0	,	10	,	5	,	5	,	5	,	0	,	0	,
5	,	5	,	18	,	20	,	20	,	15	,	5	,	5	,
8	,	10	,	15	,	25	,	25	,	15	,	10	,	8	,
18	,	20	,	25	,	30	,	30	,	25	,	20	,	18	,
30	,	30	,	30	,	35	,	35	,	30	,	30	,	30	,
0	,	0	,	0	,	0	,	0	,	0	,	0	,	0	
};

// 15A CHANGED N3
const int KnightTable[64] = {
-19	,	-11	,	-8	,	-7	,	-7	,	-8	,	-11	,	-19	,
-6	,	-2	,	0	,	5	,	5	,	0	,	-2	,	-6	,
-7	,	5	,	10	,	12	,	12	,	10	,	5	,	-7  ,
-3	,	10	,	15	,	20	,	20	,	15	,	10	,	-3	,
-3	,	11	,	14	,	24	,	24	,	14	,	11	,	-3	,
0	,	12	,	28	,	26	,	26	,	28	,	12	,	 0	,
-7	,	0	,	4	,	12  ,	12	,	4	,	0	,	-7	,
-24	,	-8	,	-6	,	-4	,	-4	,	-6	,	-8	,	-24		
};

//15A ORIGINAL
const int BishopTable[64] = {
-30	,	-3	,	-11	,	-20	,	-20	,	-11	,	-3	,	-30	,
-6	,	12	,	14	,	10	,	10	,	14	,	12	,	-6	,
-2	,	18	,	10	,	15	,	15	,	10	,	18	,	-2	,
0	,	12	,	18	,	24	,	24	,	18	,	12	,	0	,
-2	,	22	,	16	,	20	,	20	,	16	,	22	,	-2	,
-4	,	8	,	6	,	12	,	12	,	6	,	8	,	-4	,
-6	,	2	,	10	,	4	,	4	,	10	,	2	,	-6	,
-38	,	0	,	-12	,   -18	,	-18	,	-12	,	0	,	-38	
};

//16 & NEW ONE
const int RookTable[64] = {
0	,	0	,	5	,	10	,	10	,	5	,	0	,	0	,
-2	,	0	,	4	,	10	,	10	,	4	,	0	,	-2	,
-2	,	0	,	7	,	8	,	8	,	7	,	0	,	-2	,
0	,	5	,	5	,	6	,	6	,	5	,	5	,	0	,
-4	,	0	,	5	,	8	,	8	,	5	,	0	,	-4	,
-2	,	27	,	30	,	36	,	36	,	30	,	27	,	-2	,
27	,	36	,	37	,	38	,	38	,	37	,	36	,	27	,
-2	,	20	,	27	,	34	,	34	,	27	,	20	,	-2		
};

const int QueenTable[64] = {
-30	,	-5	,	-5	,	0	,	0	,	-5	,	-5	,	-30	,
-10	,	0	,	0	,	0	,	0	,	0	,	0	,	-10	,
-5	,	0	,	0	,	0	,	0	,	0	,	0	,	-5	,
0	,	0	,	0	,	0	,	0	,	0	,	0	,	0	,
0	,	0	,	0	,	0	,	0	,	0	,	0	,	0	,
-5	,	0	,	0	,	0	,	0	,	0	,	0	,	-5	,
-10	,	0	,	0	,	0	,	0	,	0	,	0	,	-10	,
-30	,	0	,	0	,	0	,	0	,	0	,	0	,	-30		
};

const int KingE[64] = {	
	-50 ,	-20	,	-10	,	0	,	0	,	-10	,	-20	,	-50	,
	-20 ,	0	,	20	,	20	,	20	,	20	,	0	,	-20	,
	0	,	20	,	40	,	40	,	40	,	40	,	20	,	0	,
	0	,	20	,	40	,	80	,	80	,	40	,	20	,	0	,
	0	,	20	,	40	,	80	,	80	,	40	,	20	,	0	,
	0	,	20	,	40	,	40	,	40	,	40	,	20	,	0	,
	-20 ,	0	,	20	,	20	,	20	,	20	,	0	,	-20	,
	-50	,	-20	,	0	,	0	,	0	,	0	,	-20	,	-50	
};

const int KingO[64] = {	
	15	,	20	,	 0	,	-10	,	-10	,	-10	,	20	,	15	,
	16	,	18	,	 0	,	-30	,	-30	,	-30	,	18	,	16	,
	-50	,	-50	,	-50	,	-50	,	-50	,	-50	,	-50	,	-50	,
	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,
	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,
	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,
	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,
	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,	-70	,	-70		
};

const int PawnTableMG[64] = {
0	,	0	,	0	,	0	,	0	,	0	,	0	,	0	,
3	,	3	,   10	,	19	,   16	,   19	,	7	,	-5	,
-9	,	-15	,	11	,	15	,	32	,	22	,	5	,	-22	,
-8	,	-23	,	19	,	20	,	40	,	17	,	4	,	-12	,
5	,	0	,	-13	,	44	,	42	,	-2	,	-13	,	5	,
-5	,	-12	,	-7	,	22	,	-8	,	-5	,	-15	,	-18	,
-7	,	7	,	-3	,	-13	,	5	,	-16	,	10	,	-8	,
0	,	0	,	0	,	0	,	0	,	0	,	0	,	0	
};

const int PawnTableEG[64] = {
0	,	0	,	0	,	0	,	0	,	0	,	0	,	0	,
-10	,	-6	,   10	,	0	,   14	,   7	,	-5	,	-19	,
-10	,	-10	,	-10	,	4	,	4	,	3	,	-6	,	-4	,
6	,	-2	,	-8	,	-4	,	-13	,	-12	,	-10	,	-9	,
9	,	4	,	3	,	-12	,	-12	,	-6	,	13	,	8	,
28	,	20	,	21	,	28	,	30	,	7	,	6	,	13	,
0	,	-11	,	12	,	21	,	25	,	19	,	4	,	7	,
0	,	0	,	0	,	0	,	0	,	0	,	0	,	0	
};

const int KnightTableMG[64] = {
-79 ,	-45	,	-37	,	-37	,	-37	,	-37	,	-45	,  -79	,
-37	,	-18	,	-11	,	-4	,	-4	,	-11	,	-18	,   -37	,
-30	,	-9	,	 1	,	8	,	8	,	2	,	-9	,	-30 ,
-13	,	 2	,	 19	,	22	,	22	,	19	,	2	,   -13	,
-13	,	 6	,	 19	,	24	,	24	,	19	,	6	,   -13	,
-5	,	 13	,	 29	,	25	,	25	,	29	,	13	,	-5	,
-31	,	-9	,	 2	,	17	,	17	,	2	,   -9	,	-31	,
-93 ,	-37	,	-24	,	-15	,	-15	,	-24	,	-37	,	-93		
};
const int KnightTableEG[64] = {
-49 ,	-34	,	-21	,	-8	,	-8	,	-21	,	-34	,  -49	,
-32	,	-26	,	-7	,	2	,	2	,	-7	,	-26	,   -32	,
-17	,	-15	,	 -2	,	12	,	12	,	-2	,	-15	,	-17 ,
-16	,	 0	,	 6	,	15	,	15	,	6	,	0	,   -16	,
-19	,	-9	,	 2	,	16	,	16	,	2	,  -9	,   -19	,
-23	,	-17	,	-7	,	8	,	8	,  -7	,  -17	,	-23	,
-30	,	-21	,	-17	,	7	,	7	,  -17	,  -21	,	-30	,
-46 ,	-41	,	-24	,	-7	,	-7	,	-24	,	-41	,	-46		
};


const int BishopTableMG[64] = {
-20	,   -2	,	-5	,	-13	,	-13	,	-5	,	-2	,	-20	,
-8	,	3	,	6	,	 1 	,	1   ,	6	,	3	,	-8	,
-3	,	11	,	-1	,	7	,	7	,	-1	,	11	,	-3	,
0	,	3	,	12	,	17	,	17	,	12	,	3	,	0	,
-3	,	14	,	10	,	13	,	13	,	10	,	14	,	-3	,
-8	,	 2	,	0	,	3	,	3	,	0	,	2	,	-8	,
-9	,  -8	,	4	,	-2	,	-2	,	4	,	-8	,	-9	,
-22	,	-1	,	-5	,	-11	,	-11	,	-5	,	-1	,	-22	
};
const int BishopTableEG[64] = {
-29	,   -14	,	-16	,	-3	,	-3	,	-16	,	-14	,	-29	,
-17	,	-6	,	-6	,	 0 	,	0   ,	-6	,	-6	,	-17	,
-8	,	0	,	-3	,	6	,	6	,	-3	,	0	,	-8	,
-12	,	-1	,	0	,	7	,	7	,	0	,	-1	,	-12	,
-11	,	-2	,	-4	,	8	,	8	,	-4	,	-2	,	-11	,
-12	,	 1	,	0	,	7	,	7	,	0	,	1	,	-12	,
-15	,  -8	,	-3	,	4	,	4	,	-3	,	-8	,	-15	,
-23	,	-18	,	-18	,	-9	,	-9	,	-18	,	-18	,	-23	
};

const int RookTableMG[64] = {
-14	,	-9	,	-6	,	-2	,	-2	,  -6	,  -9	,  -14	,
-9	,	-6	,	-3	,	2	,	2	,	-3	,	-6	,	-9	,
-11	,	-5	,	 0	,	1	,	1	,	0	,	-5	,	-11	,
-6	,	-2	,	-1	,	-2	,	-2	,	-1	,	-2	,	-6	,
-12	,	-7	,	-1	,	1	,	1	,	-1	,	-7	,	-12	,
-10	,	0	,	2	,	5	,	5	,	2	,	 0	,	-10	,
0	,	5	,	7	,	8	,	8	,	7	,	5	,	0	,
-7	,	-8	,	0	,	4	,	4	,	0	,	-8	,	-7		
};
const int RookTableEG[64] = {
-4	,	-6	,	-4	,	-4	,	-4	,  -4	,  -6	,  -4	,
-5	,	-4	,	0	,	0	,	0	,	0	,	-4	,	-5	,
2	,	-3	,	0	,	-2	,	-2	,	0	,	-3	,	2	,
-2	,	 0	,	-4	,	 3	,	 3	,	-4	,	0	,	-2	,
-2	,	 3	,	3	,	-2	,	-2	,	3	,	 3	,	-2	,
2	,	0	,	-3	,	4	,	4	,	-3	,	0	,	2	,
1	,	2	,	9	,	-2	,	-2	,	9	,	2	,	1	,
8	,	0	,	8	,	6	,	6	,	8	,	0	,	8		
};

const int QueenTableMG[64] = {
 1	,	-2	,	-2	,	1	,	1	,	-2	,	-2	,	1	,
-1	,	2	,	3	,	5	,	5	,	3	,	2	,	-1	,
-1	,	2	,	6	,	3	,	3	,	6	,	2	,	-1	,
1	,	2	,	4	,	3	,	3	,	4	,	2	,	1	,
0	,	6	,	5	,	2	,	2	,	5	,	6	,	0	,
-1	,	4	,	2	,	3	,	3	,	2	,	4	,	-1	,
-2	,	2	,	4	,	3	,	3	,	4	,	2	,	-2	,
0	,	0	,	0	,	0	,	0	,	0	,	0	,	0		
};
const int QueenTableEG[64] = {
-32	,	-26	,	-22	,	-12	,	-12	,	-22	,	-26	,	-32	,
-25	,	-14	,	-10	,	-1	,	-1	,	-10	,	-14	,	-25	,
-18	,	-8	,	-4	,	1	,	1	,	-4	,	-8	,	-18	,
-10	,	-1	,	6	,	11	,	11	,	6	,	-1	,	-10	,
-13	,	-2	,	4	,	9	,	9	,	4	,	-2	,	-13	,
-17	,	-8	,	-5	,	0	,	0	,	-5	,	-8	,	-17	,
-23	,	-12	,	-11	,	-3	,	-3	,	-11	,	-12	,	-23	,
-35	,	-24	,	-20	,	-16	,	-16	,	-20	,	-24	,	-35		
};

const int KingEG[64] = {	
	0   ,	19	,	37	,	89	,	89	,	37	,	19	,	0	,
	26  ,	46	,	64	,	61	,	61	,   64	,	46	,	26	,
	40	,	64	,	77	,	81	,	81	,	77	,	64	,	40	,
    48	,	71	,	78	,	79	,	79	,	78	,	71	,	48	,
	46	,	77	,	92	,	91	,	91	,	92	,	77	,	46	,
	40	,	76	,	81	,	88	,	88	,	81	,	76	,	40	,
	18  ,	46	,	60	,	66	,	66	,	60	,	46	,	18	,
	2 	,	28	,	35	,	35	,	35	,	35	,	28	,	2	
};

/*const int KingMG[64] = {	
	63	,	82	,	64	,	44	,	44	,	64	,	82	,	63	,
	65	,	71	,	56	,	42	,	42	,	56	,	71  ,	65	,
	46	,	59	,	39	,	28	,	28	,	39	,	59	,	46	,
	39	,	44	,	31	,	25	,	25	,	31	,	44	,	39	,
	34	,	41	,	26	,	16	,	16	,	26	,	41	,	34	,
	28	,	37	,	19	,	8	,	8	,	19	,	37	,	28	,
	20	,	28	,	15	,	5	,	5	,	15	,	28	,	20	,
	15	,	20	,	11	,   0	,	0	,	11	,	20	,	15		
};*/

const int KingMG[64] = {	
	126	,	164	,	128	,	88	,	88	,	128	,	164	,	126	,
	130	,	142	,	112	,	84	,	84	,	112	,	142 ,	130	,
	92	,	118	,	78	,	56	,	56	,	78	,	118	,	92	,
	78	,	88	,	62	,	50	,	50	,	62	,	88	,	78	,
	68	,	82	,	52	,	32	,	32	,	52	,	82	,	68	,
	56	,	74	,	38	,	16	,	16	,	38	,	74	,	56	,
	40	,	56	,	30	,	11	,	11	,	30	,	56	,	40	,
	30	,	40	,	22	,	0	,	0	,	22	,	40	,	30		
};

static const int SafetyTable[100] = {
     0,  0,   1,   2,   3,   5,   7,   9,  12,  15,
    18,  22,  26,  30,  35,  39,  44,  50,  56,  62,
    68,  75,  82,  85,  89,  97, 105, 113, 122, 131,
    140, 150, 169, 180, 191, 202, 213, 225, 237, 248,
    260, 272, 283, 295, 307, 319, 330, 342, 354, 366,
    377, 389, 401, 412, 424, 436, 448, 459, 471, 483,
    494, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500
};

/*const int ShelterStrength[4][8] = {
    {  -6,  81,  93,  58,  39,  18,   25 },
    { -43,  61,  35, -49, -29, -11,  -63 },
    { -10,  75,  23,  -2,  32,   3,  -45 },
    { -39, -13, -29, -52, -48, -67, -166 }
};

const int UnblockedStorm[4][8] = {
    {  89, -285, -185, 93, 57,  45,  51 },
    {  44,  -18,  123, 46, 39,  -7,  23 },
    {   4,   52,  162, 37,  7, -14,  -2 },
    { -10,  -14,   90, 15,  2,  -7, -16 }
};*/

const int ShelterStrength[4][8] = {
    {  -2,  38,  43,  27,  18,   8,   11 },
    { -20,  28,  16, -23, -13,  -5,  -29 },
    {  -4,  35,  10,   0,  15,   1,  -21 },
    { -18,  -6, -13, -24, -22, -31,  -77 }
};

const int UnblockedStorm[4][8] = {
    {  41, -133,  -86, 43, 26,  21,  23 },
    {  20,   -8,   57, 21, 18,  -3,  10 },
    {   1,   24,   76, 17,  3,  -6,   0 },
    {  -4,   -6,   42,  7,  0,  -3,  -7 }
};

const int KingShelter[2][8][8] = {
  {{  -11,  15,  20,  12,   6,   1,  -3, -49},
   {   17,  20,   1, -14, -30, -70,  92, -25},
   {   35,  14, -28, -11,  20, -11,   0, -12},
   {    4,  21,   4,  15,  25,  58,-136,   5},
   {  -15,   4, -26, -18, -20, -41,  33,  -6},
   {   46,  22, -21, -12,   5,  17,  41, -24},
   {   25,  -1, -23, -19, -30, -36,   0, -10},
   {   -9,   6,   7,  -2, -11,  -9,-190, -17}},
  {{    0, -11,   4, -40, -22,   3,-167, -46},
   {    0,  24,   7, -18,  -1,  26,-184, -39},
   {    0,  30,  -2,   7,  15, -87, -84, -20},
   {    0,  -3,  -2, -17, -27, -99,   7, -22},
   {    0,  12,  11,  14,  14, -57,-104,  -1},
   {    0,   6, -20, -27,  17, -38,  55, -18},
   {    0,  22,  11,  -9, -27,  -9, -56, -31},
   {    0,  12,  19, -18, -17,  -5,-228, -22}},
};

const int KingStorm[2][4][8] = {
  {{ -4, 117, -25, -19, -14,  -8, -17, -22},
   { -3,  57, -19,  -5,  -4,   5,  -1, -11},
   {  8,  17, -23, -11,   3,   7,   9,   3},
   { -2,  16, -17, -14, -13,   7,   1, -13}},
  {{  0, -15, -17,  18,   9,   3,  -3,  17},
   {  0, -16,  -3,  35,  -1,  13,  -7, -17},
   {  0, -28, -27,  11,   3,  -8, -13, -11},
   {  0,  -2, -16, -12,  -4,   4,  72,  13}},
};

const int n_adj[9] = { -27, -22, -16, -10, -5,  0,  5, 10, 16};
const int r_adj[9] = {  20,  16,  12,  8,  4,  0, -4, -8, -12}; 

#define ENDGAME_MAT (1 * PieceVal[wR] + 2 * PieceVal[wN] + 2 * PieceVal[wP] + PieceVal[wK])

#endif